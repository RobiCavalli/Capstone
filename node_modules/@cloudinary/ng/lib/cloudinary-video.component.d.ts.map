{"version":3,"file":"cloudinary-video.component.d.ts","sources":["cloudinary-video.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit, ElementRef, EventEmitter, OnChanges, OnDestroy } from '@angular/core';\nimport { CloudinaryVideo } from '@cloudinary/url-gen';\nimport { Plugins, VideoPoster, VideoSources } from '@cloudinary/html';\n/**\n * @memberOf AngularSDK\n * @type {Component}\n * @description The Cloudinary video component.\n * @prop {CloudinaryVideo} transformation Generated by @cloudinary/url-gen\n * @prop {VideoPoster} transformation Generated by @cloudinary/url-gen\n * @prop {Plugins} plugins Advanced image component plugins lazyload()\n * @prop videoAttributes Optional attributes include controls, loop, muted, poster, preload, autoplay\n * @prop videoEvents Optional video events include play, loadstart, playing, error, ended\n * @prop {VideoSources} sources Optional sources to generate\n * @example\n *  <caption>\n *  Using custom defined resources.\n * </caption>\n *   vid = new CloudinaryVideo('dog', {cloudName: 'demo'});\n *   sources = [\n {\n        type: 'mp4',\n        codecs: ['vp8', 'vorbis'],\n        transcode: videoCodec(auto())\n},\n {\n        type: 'webm',\n        codecs: ['avc1.4D401E', 'mp4a.40.2'],\n         transcode: videoCodec(auto())\n      }];\n *\n * <advanced-video [cldvid]=\"vid\" [sources]=\"sources\" controls></advanced-video>\n */\nexport declare class CloudinaryVideoComponent implements OnInit, OnChanges, OnDestroy {\n    private el;\n    constructor(el: ElementRef);\n    cldVid: CloudinaryVideo;\n    cldPoster: VideoPoster;\n    sources: VideoSources;\n    plugins: Plugins;\n    poster: string;\n    innerRef: ElementRef;\n    play: EventEmitter<any>;\n    loadstart: EventEmitter<any>;\n    playing: EventEmitter<any>;\n    error: EventEmitter<any>;\n    ended: EventEmitter<any>;\n    controls: any;\n    loop: any;\n    muted: any;\n    preload: any;\n    autoPlay: any;\n    playsInline: any;\n    private htmlVideoLayerInstance;\n    /**\n     * On init creates a new HTMLVideoLayer instance and initializes with ref to video element,\n     * user generated cloudinaryVideo and the plugins to be used.\n     */\n    ngOnInit(): void;\n    /**\n     * On update, we cancel running plugins and update the video instance if the src\n     * was changed.\n     */\n    ngOnChanges(): void;\n    /**\n     * On destroy, we cancel the currently running plugins.\n     */\n    ngOnDestroy(): void;\n    /**\n     * Returns video attributes.\n     */\n    getVideoAttributes(): {\n        controls: any;\n        loop: any;\n        muted: any;\n        poster: string;\n        preload: any;\n        autoplay: any;\n        playsinline: any;\n    };\n    emitPlayEvent(): void;\n    emitLoadstartEvent(): void;\n    emitPlayingEvent(): void;\n    emitErrorEvent(): void;\n    emitEndedEvent(): void;\n    /**\n     * Attach both this.videoRef and props.innerRef as ref to the given element.\n     */\n    attachRef(): void;\n}\n"]}